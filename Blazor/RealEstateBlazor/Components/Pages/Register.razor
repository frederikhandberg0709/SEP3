@page "/register"

@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Text
@using System.Text.Json
@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Data.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Services
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider

@rendermode InteractiveServer

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <h3>Register account</h3>
            
            <div class="form-group mb-3">
                <label>Username</label>
                <input type="text" class="form-control" @bind="registration.Username"/>
                @if (!string.IsNullOrEmpty(usernameError))
                {
                    <small class="text-danger">@usernameError</small>
                }
            </div>

            <div class="form-group mb-3">
                <label>Password</label>
                <input type="password" class="form-control" @bind="registration.Password"/>
                @if (!string.IsNullOrEmpty(passwordError))
                {
                    <small class="text-danger">@passwordError</small>
                }
            </div>

            <div class="form-group mb-3">
                <label>Full Name</label>
                <input type="text" class="form-control" @bind="registration.FullName"/>
                @if (!string.IsNullOrEmpty(fullNameError))
                {
                    <small class="text-danger">@fullNameError</small>
                }
            </div>

            <div class="form-group mb-3">
                <label>Email</label>
                <input type="email" class="form-control" @bind="registration.Email"/>
                @if (!string.IsNullOrEmpty(emailError))
                {
                    <small class="text-danger">@emailError</small>
                }
            </div>

            <div class="form-group mb-3">
                <label>Phone Number</label>
                <input type="tel" class="form-control" @bind="registration.PhoneNumber"/>
                @if (!string.IsNullOrEmpty(phoneError))
                {
                    <small class="text-danger">@phoneError</small>
                }
            </div>

            <div class="form-group mb-3">
                <label>Address</label>
                <textarea class="form-control" @bind="registration.Address"></textarea>
                @if (!string.IsNullOrEmpty(addressError))
                {
                    <small class="text-danger">@addressError</small>
                }
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <div class="d-flex justify-content-between align-items-center">
                <button class="btn btn-primary" @onclick="HandleRegistration" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>Registering...</span>
                    }
                    else
                    {
                        <span>Register</span>
                    }
                </button>
                <button @onclick="@(() => NavigationManager.NavigateTo("/login"))" class="btn btn-secondary">Back to Login</button>
            </div>
        </NotAuthorized>
        
        <Authorized>
            <h3>Hello, @context.User.Identity.Name</h3>
            <button @onclick="HandleLogout">Log out</button>
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private RegistrationDTO registration = new()
    {
        Role = "USER"
    };
    
    public bool isLoading = false;
    private string errorMessage = string.Empty;
    private string usernameError = string.Empty;
    private string passwordError = string.Empty;
    private string fullNameError = string.Empty;
    private string emailError = string.Empty;
    private string phoneError = string.Empty;
    private string addressError = string.Empty;

    private async Task HandleRegistration()
    {
        isLoading = true;
        usernameError = string.Empty;
        passwordError = string.Empty;
        fullNameError = string.Empty;
        emailError = string.Empty;
        phoneError = string.Empty;
        addressError = string.Empty;

        try 
        {
            if (!ValidateRegistration())
            {
                return;
            }
            
            using var response = await HttpClient.PostAsJsonAsync("http://localhost:8080/api/users/register", registration);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<RegistrationResponseDTO>();
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (error != null && error.TryGetValue("error", out string errorMsg))
                {
                    if (errorMsg.Contains("Username", StringComparison.OrdinalIgnoreCase))
                    {
                        usernameError = errorMsg;
                    }
                    else if (errorMsg.Contains("Password", StringComparison.OrdinalIgnoreCase))
                    {
                        passwordError = errorMsg;
                    }
                    else if (errorMsg.Contains("Email", StringComparison.OrdinalIgnoreCase))
                    {
                        emailError = errorMsg;
                    }
                    else if (errorMsg.Contains("Phone", StringComparison.OrdinalIgnoreCase))
                    {
                        phoneError = errorMsg;
                    }
                    else if (errorMsg.Contains("Address", StringComparison.OrdinalIgnoreCase))
                    {
                        addressError = errorMsg;
                    }
                    else if (errorMsg.Contains("Name", StringComparison.OrdinalIgnoreCase))
                    {
                        fullNameError = errorMsg;
                    }
                    else
                    {
                        errorMessage = errorMsg;
                    }
                }
                else
                {
                    errorMessage = "Registration failed. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private bool ValidateRegistration()
    {
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(registration.Username))
        {
            usernameError = "Username is required";
            isValid = false;
        }
        else if (registration.Username.Length < 3)
        {
            usernameError = "Username must be at least 3 characters";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.Password))
        {
            passwordError = "Password is required";
            isValid = false;
        }
        else if (registration.Password.Length < 6)
        {
            passwordError = "Password must be at least 6 characters";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.Email))
        {
            emailError = "Email is required";
            isValid = false;
        }
        else if (!registration.Email.Contains("@") || !registration.Email.Contains("."))
        {
            emailError = "Invalid email format";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.FullName))
        {
            fullNameError = "Full Name is required";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.PhoneNumber))
        {
            phoneError = "Phone Number is required";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.Address))
        {
            addressError = "Address is required";
            isValid = false;
        }

        return isValid;
    }
    
    private async Task HandleLogout()
    {
        await (
            (SimpleAuthProvider)AuthProvider).LogoutAsync();
        
        NavigationManager.NavigateTo("/", false);
    }
}