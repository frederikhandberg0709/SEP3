@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Text
@using System.Text.Json
@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Data.DTOs
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Services
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider

@page "/register"
@rendermode InteractiveServer

<link rel="stylesheet" href="Register.css">

<PageTitle>Register | Real Estate Plus</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <div class="register-page">
                <div class="register-container">
                    <div class="register-header">
                        <h2>Create Your Account</h2>
                        <p>Join Real Estate Plus to find your dream property</p>
                    </div>
                    
                    <div class="form-container">
                        <div class="form-group">
                            <label for="username">Username</label>
                            <div class="input-wrapper">
                                <svg>
                                    <use href="#icon-user"></use>
                                </svg>
                                <input type="text" id="username" placeholder="Choose a username" @bind="registration.Username"/>
                            </div>
                                
                                @if (!string.IsNullOrEmpty(usernameError))
                            {
                                <small class="text-danger">@usernameError</small>
                            }
                        </div>

                        <div class="form-group">
                            <label for="password">Password</label>
                            <div class="input-wrapper">
                                <svg>
                                    <use href="#icon-lock"></use>
                                </svg>
                                <input type="password" id="password" placeholder="Create a password" @bind="registration.Password"/>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(passwordError))
                            {
                                <small class="text-danger">@passwordError</small>
                            }
                        </div>

                        <div class="form-group">
                            <label for="fullname">Full Name</label>
                            <div class="input-wrapper">
                                <svg>
                                    <use href="#icon-user-plus"></use>
                                </svg>
                                <input type="text" id="fullname" placeholder="Your full name" @bind="registration.FullName"/>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(fullNameError))
                            {
                                <small class="text-danger">@fullNameError</small>
                            }
                        </div>

                        <div class="form-group">
                            <label for="email">Email</label>
                            <div class="input-wrapper">
                                <svg>
                                    <use href="#icon-mail"></use>
                                </svg>
                                <input type="email" id="email" placeholder="Your email address" @bind="registration.Email"/>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(emailError))
                            {
                                <small class="text-danger">@emailError</small>
                            }
                        </div>

                        <div class="form-group">
                            <label for="phone">Phone Number</label>
                            <div class="input-wrapper">
                                <svg>
                                    <use href="#icon-phone"></use>
                                </svg>
                                <input type="tel" id="phone" placeholder="Your phone number" @bind="registration.PhoneNumber"/>
                            </div>
                                
                            @if (!string.IsNullOrEmpty(phoneError))
                            {
                                <small class="text-danger">@phoneError</small>
                            }
                        </div>
                        
                        <div class="form-group">
                            <label for="address">Address</label>
                            <div class="input-wrapper textarea-wrapper">
                                <svg>
                                    <use href="#icon-location"></use>
                                </svg>
                                <textarea id="address" placeholder="Your address" @bind="registration.Address"></textarea>
                            </div>

                            @if (!string.IsNullOrEmpty(addressError))
                            {
                                <small class="text-danger">@addressError</small>
                            }
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class ="alert-error">
                            <svg>
                                <use href="#icon-circle-exclamation"></use>
                            </svg>
                            @errorMessage
                        </div>
                    }
                    
                    <button @onclick="HandleRegistration" disabled="@isLoading" class="btn-register">
                        @if (isLoading)
                        {
                            <span>Creating Account...</span>
                        }
                        else
                        {
                            <span>Create Account</span>
                        }
                    </button>
                    
                    <div class="register-footer">
                        <p>Already have an account? <a @onclick="@(() => NavigationManager.NavigateTo("/login"))" class="login-link">Sign In</a></p>
                    </div>
                </div>
            </div>
        </NotAuthorized>
        
        <Authorized>
            <div class="logged-in-container">
                <div class="logged-in-content">
                    <div class="user-greeting">
                        <h2>Welcome, @context.User.Identity.Name</h2>
                        <p>You are already registered and logged in</p>
                    </div>

                    <div class="logged-in-content-cta">
                        <button @onclick="HandleLogout" class="btn-logout">
                            <svg>
                                <use href="#icon-logout"></use>
                            </svg>
                            Sign Out
                        </button>

                        <a href="/" class="return-home">Return to Homepage</a>
                    </div>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private RegistrationDTO registration = new()
    {
        Role = "USER"
    };
    
    public bool isLoading = false;
    private string errorMessage = string.Empty;
    private string usernameError = string.Empty;
    private string passwordError = string.Empty;
    private string fullNameError = string.Empty;
    private string emailError = string.Empty;
    private string phoneError = string.Empty;
    private string addressError = string.Empty;

    private async Task HandleRegistration()
    {
        isLoading = true;
        usernameError = string.Empty;
        passwordError = string.Empty;
        fullNameError = string.Empty;
        emailError = string.Empty;
        phoneError = string.Empty;
        addressError = string.Empty;

        try 
        {
            if (!ValidateRegistration())
            {
                return;
            }
            
            using var response = await HttpClient.PostAsJsonAsync("http://localhost:8080/api/users/register", registration);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<RegistrationResponseDTO>();
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (error != null && error.TryGetValue("error", out string errorMsg))
                {
                    if (errorMsg.Contains("Username", StringComparison.OrdinalIgnoreCase))
                    {
                        usernameError = errorMsg;
                    }
                    else if (errorMsg.Contains("Password", StringComparison.OrdinalIgnoreCase))
                    {
                        passwordError = errorMsg;
                    }
                    else if (errorMsg.Contains("Email", StringComparison.OrdinalIgnoreCase))
                    {
                        emailError = errorMsg;
                    }
                    else if (errorMsg.Contains("Phone", StringComparison.OrdinalIgnoreCase))
                    {
                        phoneError = errorMsg;
                    }
                    else if (errorMsg.Contains("Address", StringComparison.OrdinalIgnoreCase))
                    {
                        addressError = errorMsg;
                    }
                    else if (errorMsg.Contains("Name", StringComparison.OrdinalIgnoreCase))
                    {
                        fullNameError = errorMsg;
                    }
                    else
                    {
                        errorMessage = errorMsg;
                    }
                }
                else
                {
                    errorMessage = "Registration failed. Please try again.";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private bool ValidateRegistration()
    {
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(registration.Username))
        {
            usernameError = "Username is required";
            isValid = false;
        }
        else if (registration.Username.Length < 3)
        {
            usernameError = "Username must be at least 3 characters";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.Password))
        {
            passwordError = "Password is required";
            isValid = false;
        }
        else if (registration.Password.Length < 6)
        {
            passwordError = "Password must be at least 6 characters";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.Email))
        {
            emailError = "Email is required";
            isValid = false;
        }
        else if (!registration.Email.Contains("@") || !registration.Email.Contains("."))
        {
            emailError = "Invalid email format";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.FullName))
        {
            fullNameError = "Full Name is required";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.PhoneNumber))
        {
            phoneError = "Phone Number is required";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(registration.Address))
        {
            addressError = "Address is required";
            isValid = false;
        }

        return isValid;
    }
    
    private async Task HandleLogout()
    {
        await (
            (SimpleAuthProvider)AuthProvider).LogoutAsync();
        
        NavigationManager.NavigateTo("/", false);
    }
}