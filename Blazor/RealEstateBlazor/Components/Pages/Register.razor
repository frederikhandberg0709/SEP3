@page "/register"
@using System.ComponentModel.DataAnnotations
@using System.Net.Http
@using System.Text
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="register-container">
    <EditForm Model="@registrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="registrationModel.Username" />
            <ValidationMessage For="@(() => registrationModel.Username)" />
        </div>

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
            <ValidationMessage For="@(() => registrationModel.Email)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="registrationModel.Password" />
            <ValidationMessage For="@(() => registrationModel.Password)" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isLoading">Register</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }
</div>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleRegistration()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try 
        {
            var registrationDto = new 
            {
                username = registrationModel.Username,
                email = registrationModel.Email,
                password = registrationModel.Password
            };

            var content = new StringContent(
                JsonSerializer.Serialize(registrationDto), 
                Encoding.UTF8, 
                "application/json"
            );

            var response = await HttpClient.PostAsync("http://localhost:8080/api/users/register", content);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/login");
            }
            else 
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Registration failed: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, ErrorMessage = "Username cannot be longer than 50 characters")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be between 6 and 100 characters")]
        public string Password { get; set; } = string.Empty;
    }
}