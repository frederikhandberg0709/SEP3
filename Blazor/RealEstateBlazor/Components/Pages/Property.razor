@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Data.DTOs
@using RealEstateBlazor.Services
@using RealEstateBlazor.Components.Layout
@inject IPropertyService PropertyService
@inject IImageService ImageService

@page "/property/{Id}"
@rendermode InteractiveServer

<PageTitle>Property</PageTitle>

<link rel="stylesheet" href="Property.css">

@if (loading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}
else if (property != null)
{
    <div class="custom-carousel">
        <div class="carousel-container">
            @if (images != null && images.Any())
            {
                @foreach (var image in images)
                {
                    <div class="carousel-item @(image == images[currentIndex] ? "active" : "")">
                        <img src="data:image/jpeg;base64,@image.Base64ImageData" alt="Property image">
                    </div>
                }
                
                @if (images.Count() > 1)
                {
                    <button class="carousel-nav prev" @onclick="PreviousImage">
                        <svg>
                            <use href="#icon-arrow-left"></use>
                        </svg>
                    </button>
                    <button class="carousel-nav next" @onclick="NextImage">
                        <svg>
                            <use href="#icon-arrow-right"></use>
                        </svg>
                    </button>

                    <div class="carousel-indicators">
                        @for (int i = 0; i < images.Count(); i++)
                        {
                            var index = i;
                            <button class="indicator @(currentIndex == index ? "active" : "")"
                                    @onclick="() => GoToImage(index)">
                            </button>
                        }
                    </div>
                }
            }
            else
            {
                <div class="carousel-container">
                    <div class="no-images">
                        No images available
                    </div>
                </div>
            }
        </div>
    </div>
        
    <div class="row">
        <div class="col-md-6">
            <div>
                @if (property.PropertyId > 0)
                {
                    <BookmarkToggle PropertyId="@property.PropertyId" OnBookmarkChanged="HandleBookmarkChanged"/>
                }
            </div>
            
            <div class="mb-4">
                <h5 class="text-muted">Price</h5>
                <p class="lead fw-bold">@property.Price.ToString("C")</p>
            </div>

            <div class="mb-4">
                <h5 class="text-muted">Address</h5>
                <p class="lead">@property.Address</p>
            </div>

            <div class="mb-4">
                <h5 class="text-muted">Property Type</h5>
                <p>@property.PropertyType</p>
            </div>

            @if (property.PropertyType?.ToUpper() == "HOUSE")
            {
                var house = property as House;
                <div class="mb-4">
                    <h5 class="text-muted">Number of Floors</h5>
                    <p>@(house?.NumFloors ?? 1) @(house?.NumFloors == 1 ? "floor" : "floors")</p>
                </div>
            }
            else if (property.PropertyType?.ToUpper() == "APARTMENT")
            {
                var apartment = property as Apartment;
                <div class="mb-4">
                    <h5 class="text-muted">Number of Floors</h5>
                    <p>@(apartment?.NumFloors ?? 1) @(apartment?.NumFloors == 1 ? "floor" : "floors")</p>
                </div>
            }

            <div class="mb-4">
                <h5 class="text-muted">Floor Area</h5>
                <p>@property.FloorArea.ToString("N2") sq ft</p>
            </div>
        </div>

        <div class="col-md-6">
            <div class="mb-4">
                <h5 class="text-muted">Bedrooms</h5>
                <p>@(property.NumBedrooms ?? 0)</p>
            </div>

            <div class="mb-4">
                <h5 class="text-muted">Bathrooms</h5>
                <p>@(property.NumBathrooms ?? 0)</p>
            </div>

            <div class="mb-4">
                <h5 class="text-muted">Year Built</h5>
                <p>@(property.YearBuilt?.ToString() ?? "N/A")</p>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Id { get; set; }

    private Data.Models.Property? property;
    private List<ImageDTO>? images;
    private bool loading = true;
    private string? error;
    private int currentIndex = 0;

    private void NextImage()
    {
        if (images?.Count() > 0)
        {
            currentIndex = (currentIndex + 1) % images.Count();
        }
    }

    private void PreviousImage()
    {
        if (images?.Count() > 0)
        {
            currentIndex = (currentIndex - 1 + images.Count()) % images.Count();
        }
    }

    private void GoToImage(int index)
    {
        currentIndex = index;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadProperty();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null && (property == null || property.PropertyId.ToString() != Id))
        {
            await LoadProperty();
        }
    }

    private async Task LoadProperty()
    {
        try
        {
            loading = true;
            error = null;

            if (string.IsNullOrEmpty(Id))
            {
                error = "No property ID provided";
                Console.WriteLine("No property ID provided");
                return;
            }
            
            property = await PropertyService.GetPropertyByIdAsync(Id);
            images = (await ImageService.GetImagesForPropertyAsync(Id)).ToList();
        }
        catch (Exception ex)
        {
            error = $"Error loading property: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleBookmarkChanged(bool isBookmarked)
    {
        try
        {
            var status = isBookmarked ? "bookmarked" : "unbookmarked";
            Console.WriteLine($"Property {property?.Address} was {status}");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error handling bookmark change: {ex.Message}");
        }
    }
}
