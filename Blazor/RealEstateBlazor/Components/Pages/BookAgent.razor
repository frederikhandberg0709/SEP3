@page "/BookAgent"
@using RealEstateBlazor.Services
@using RealEstateBlazor.Data.Models
@inject HttpClient HttpClient
@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Data.DTOs

<head>
    <link href="BookAgent.css" rel="stylesheet" />
    <title></title>
</head>

<h3>Book an Agent</h3>

<p>Please fill out the form below to book an appointment with one of our agents.</p>

<EditForm Model="@bookingModel" OnValidSubmit="HandleValidSubmit" FormName="BookAgentForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="bookingModel.Name" />
        <ValidationMessage For="@(() => bookingModel.Name)" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="bookingModel.Email" />
        <ValidationMessage For="@(() => bookingModel.Email)" />
    </div>

    <div class="form-group">
        <label for="description">Description (Optional)</label>
        <InputTextArea id="description" class="form-control" @bind-Value="bookingModel.Description" />
    </div>

    <div class="form-group">
        <label for="date">Select Date</label>
        <InputDate id="date" class="form-control" @bind-Value="bookingModel.Date" />
        <ValidationMessage For="@(() => bookingModel.Date)" />
    </div>

    <div class="form-group buttons">
        <button type="submit" class="btn btn-primary" disabled="@isLoading">Book</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelBooking" disabled="@isLoading">Cancel</button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@if (successMessageVisible)
{
    <div class="alert alert-success mt-3">
        Booking successful for @bookingModel.Name on @bookingModel.Date: We will contact you shortly.
    </div>
}

@if (cancelMessageVisible)
{
    <div class="alert alert-warning mt-3">
        Booking canceled.
    </div>
}

@code {
    private BookingModel bookingModel = new();
    private bool successMessageVisible = false;
    private bool cancelMessageVisible = false;
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleValidSubmit()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // Serialize booking data
            var json = System.Text.Json.JsonSerializer.Serialize(bookingModel);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            // Send POST request to API
            var response = await HttpClient.PostAsync("http://localhost:5290/BookAgent", content);

            if (response.IsSuccessStatusCode)
            {
                successMessageVisible = true;
                cancelMessageVisible = false;

                // Reset the form
                bookingModel = new BookingModel();
            }
            else
            {
                var errorDetails = await response.Content.ReadAsStringAsync();
                errorMessage = $"Booking failed: {response.StatusCode}. Details: {errorDetails}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CancelBooking()
    {
        bookingModel = new BookingModel(); // Reset the form
        successMessageVisible = false;
        cancelMessageVisible = true;
    }
}
