@page "/account"
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Data.DTOs
@using RealEstateBlazor.Services
@inject NavigationManager NavigationManager
@inject IBookmarkService BookmarkService
@inject IPropertyService PropertyService
@attribute [StreamRendering]

@rendermode InteractiveServer

<head>
    <link href="Account.css" rel="stylesheet" />
</head>

<PageTitle>Account</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <div class="account-container">
                <!-- User Info Section -->
                <div class="user-info">
                    <img class="profile-pic" src="images/default-profile.png" alt="Profile Picture" />
                    <div class="info">
                        <h2>@context.User.Identity?.Name</h2>
                        <button class="update-btn">Update Info</button>
                    </div>
                </div>

                <div class="wishlist">
                    <h3>Bookmarks</h3>
                    <div class="property-grid">
                        @if (loading)
                        {
                            <p>Loading bookmarks...</p>
                        }
                        else if (bookmarkedProperties?.Any() == true)
                        {
                            @foreach (var property in bookmarkedProperties)
                            {
                                <div class="property-box">
                                    <h4>@property.Address</h4>
                                    <p>@property.Price</p>
                                    <p>@property.PropertyType</p>
                                    <button class="remove-btn" @onclick="() => RemoveBookmark(property)">Remove</button>
                                </div>
                            }
                        }
                        else
                        {
                            <p>You haven't bookmarked any properties yet.</p>
                        }
                    </div>
                </div>
            </div>
        </Authorized>
        
        <NotAuthorized>
            <p>You are not logged in.</p>
            <button @onclick="@(()=> NavigationManager.NavigateTo("login"))">Login</button>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private List<Data.Models.Property>? bookmarkedProperties;
    private bool loading;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            loading = true;
            var bookmarks = await BookmarkService.GetBookmarksByAccountIdAsync();
            var propertyTasks = bookmarks.Select(b => PropertyService.GetPropertyByIdAsync(b.PropertyId.ToString()));
            var properties = await Task.WhenAll(propertyTasks);
            bookmarkedProperties = properties.Where(p => p != null).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading bookmarks: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task RemoveBookmark(Data.Models.Property property)
    {
        try
        {
            var bookmarks = await BookmarkService.GetBookmarksByAccountIdAsync();
            var bookmark = bookmarks.FirstOrDefault(b => b.PropertyId == property.PropertyId);
            
            if (bookmark != null)
            {
                await BookmarkService.DeleteBookmarkAsync(bookmark.BookmarkId);
                bookmarkedProperties?.Remove(property);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing bookmark: {ex.Message}");
        }
    }
}
