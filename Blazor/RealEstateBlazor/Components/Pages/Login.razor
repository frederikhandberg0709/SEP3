@using Microsoft.AspNetCore.Components.Authorization
@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Data.DTOs
@using RealEstateBlazor.Services
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider
@using Microsoft.AspNetCore.Components.Web

@page "/login"
@rendermode InteractiveServer

<link rel="stylesheet" href="Login.css">

<PageTitle>Login | Real Estate Plus</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView>
        <NotAuthorized>
            <div class="login-page">
                <div class="login-container">
                    <div class="login-header">
                        <h2>Welcome Back</h2>
                        <p>Sign in to access your Real Estate Plus account</p>
                    </div>
                    
                    <div class="form-container">
                        <div class="form-group">
                            <label for="username">Username</label>
                            <div class="input-wrapper">
                                <svg>
                                    <use href="#icon-user"></use>
                                </svg>
                                <input type="text" id="username" placeholder="Enter your username" @bind="loginForm.Username"/>
                            </div>
                        </div>

                        <div class="form-group">
                            <label for="password">Password</label>
                            <div class="input-wrapper">
                                <svg>
                                    <use href="#icon-lock"></use>
                                </svg>
                                <input type="password" id="password" placeholder="Enter your password" @bind="loginForm.Password"/>
                            </div>
                        </div>

                        <div class="form-options">
                            <div class="remember-me">
                                <input type="checkbox" id="remember" />
                                <label for="remember">Remember me</label>
                            </div>
                            <a href="/forgot-password" class="forgot-link">Forgot password?</a>
                        </div>

                        <button @onclick="HandleLogin"
                                disabled="@(isLoading || string.IsNullOrWhiteSpace(loginForm.Username) || string.IsNullOrWhiteSpace(loginForm.Password))"
                                class="btn-login">
                            @if (isLoading)
                            {
                                <span class="spinner"></span>
                                <span>Signing In</span>
                            }
                            else
                            {
                                <span>Sign In</span>
                            }
                        </button>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert-error">
                                <svg>
                                    <use href="#icon-circle-exclamation"></use>
                                </svg>
                                @errorMessage
                            </div>
                        }
                        </div>

                    <div class="login-footer">
                        <p>Don't have an account? <a @onclick="@(() => NavigationManager.NavigateTo("/register"))" class="register-link">Register now</a></p>
                    </div>
                </div>
            </div>
        </NotAuthorized>
        
        <Authorized>
            <h3>Hello, @context.User.Identity.Name</h3>
            <button @onclick="HandleLogout">Log out</button>
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private Data.Models.Login loginForm { get; set; } = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        Console.WriteLine("HandleLogin called");
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            if (string.IsNullOrWhiteSpace(loginForm.Username) || string.IsNullOrWhiteSpace(loginForm.Password))
            {
                errorMessage = "Username and password are required";
                return;
            }
            
            var authStateProvider = (SimpleAuthProvider)AuthProvider;
            
            await authStateProvider.LoginAsync(loginForm.Username, loginForm.Password);
            
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            
            if (ex.Message.Contains("401") || ex.Message.Contains("403"))
            {
                errorMessage = "Invalid username or password";
            }
            else if (ex.Message.Contains("404"))
            {
                errorMessage = "User not found";
            }
            else
            {
                errorMessage = "Login failed. Please try again later.";
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleLogout()
    {
        await (
            (SimpleAuthProvider)AuthProvider).LogoutAsync();
        
        NavigationManager.NavigateTo("/", false);
    }
}
