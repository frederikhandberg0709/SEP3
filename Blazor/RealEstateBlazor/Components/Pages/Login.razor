@page "/login"

@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Data.DTOs
@using RealEstateBlazor.Services
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject ITokenService TokenService

<div class="login-container">
    <EditForm Model="@loginForm" OnValidSubmit="HandleLogin" FormName="LoginForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Username</label>
            <InputText id="username" class="form-control" @bind-Value="loginForm.Username" />
            <ValidationMessage For="@(() => loginForm.Username)" />
        </div>

        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="loginForm.Password" />
            <ValidationMessage For="@(() => loginForm.Password)" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isLoading">Login</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
        </div>
    }
</div>

@code {
    [SupplyParameterFromForm(FormName = "LoginForm")]
    private Data.Models.Login loginForm { get; set; } = new Data.Models.Login();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var loginRequest = new LoginRequestDTO
            {
                Username = loginForm.Username,
                Password = loginForm.Password
            };
            
            if (string.IsNullOrEmpty(loginRequest.Username) || string.IsNullOrEmpty(loginRequest.Password))
            {
                throw new ArgumentException("Username and Password are required");
            }
            
            Console.WriteLine($"Login Request - Username: {loginRequest.Username}, Password length: {loginRequest.Password?.Length ?? 0}");
            
            using var request = new HttpRequestMessage(HttpMethod.Post, "http://localhost:8080/api/users/login");
            request.Content = JsonContent.Create(loginRequest);
            request.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
            
            var response = await HttpClient.SendAsync(request);
            
            var responseContent = await response.Content.ReadAsStringAsync();
            
            Console.WriteLine($"Response Status: {response.StatusCode}");
            Console.WriteLine($"Response Content: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginReponseDTO>();
                
                if (loginResponse?.Token != null)
                {
                    TokenService.SetToken(loginResponse.Token);
                    NavigationManager.NavigateTo("/dashboard");
                }
                else 
                {
                    errorMessage = "Invalid response from server";
                }
            }
            else 
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Login failed: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}