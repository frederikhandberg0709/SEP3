@using RealEstateBlazor.Data.DTOs
@using RealEstateBlazor.Data.Models
@using RealEstateBlazor.Services
@inject IPropertyService PropertyService
@inject NavigationManager NavigationManager
@inject IImageService ImageService

@page "/properties"
@rendermode InteractiveServer

<PageTitle>Properties</PageTitle>

<link rel="stylesheet" href="Properties.css">

<div class="properties-container">
    <h1>Our Properties</h1>
    
    <div class="filter-section">
        <label for="filter">Filter by Type:</label>
        <select id="filter" @bind="_selectedType">
            <option value="">All</option>
            <option value="Apartment">Apartment</option>
            <option value="House">House</option>
        </select>
    </div>

    @if (_loading)
    {
        <div class="loading">Loading properties...</div>
    }
    else if (_error)
    {
        <div class="error">@_errorMessage</div>
    }
    else
    {
        <div class="property-grid">
            @if (FilteredProperties.Any())
            {
                @foreach (var property in FilteredProperties)
                {
                    <div class="property-card" @onclick="@(() => NavigateToProperty(property.PropertyId))">
                        @{
                            var propertyImages = _propertyImages.GetValueOrDefault(property.PropertyId);
                        }
                        @if (propertyImages != null && propertyImages.Any())
                        {
                            <img src="data:image/jpeg;base64,@propertyImages.First().Base64ImageData" alt="Property Image" />
                        }
                        else
                        {
                            <div class="no-image">No Image Available</div>
                        }
                        <div class="property-details">
                            <h2>@property.Address</h2>
                            <p class="price">$ @property.Price</p>
                            <p class="type">@property.PropertyType</p>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="no-results">No properties match the selected filter.</p>
            }
        </div>
    }
</div>

@code {
    private IEnumerable<Data.Models.Property> _properties = Array.Empty<Data.Models.Property>();
    private Dictionary<long, IEnumerable<ImageDTO>> _propertyImages = new();
    private string _selectedType = "";
    private bool _loading = true;
    private bool _error;
    private string _errorMessage = "";

    private IEnumerable<Data.Models.Property> FilteredProperties =>
        string.IsNullOrEmpty(_selectedType)
            ? _properties
            : _properties.Where(p => p.PropertyType.Equals(_selectedType, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;
            _properties = await PropertyService.GetAllPropertiesAsync();

            foreach (var property in _properties)
            {
                try
                {
                    var images = await ImageService.GetImagesForPropertyAsync(property.PropertyId.ToString());
                    _propertyImages[property.PropertyId] = images;
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"Error loading images for property {property.PropertyId}: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            _error = true;
            _errorMessage = "Failed to load properties. Please try again later.";
            Console.Error.WriteLine($"Error loading properties: {ex}");
        }
        finally
        {
            _loading = false;
        }
    }
    
    private void NavigateToProperty(long propertyId)
    {
        NavigationManager.NavigateTo($"/property/{propertyId}");
    }
}
