@page "/notifications"
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstateBlazor.Data.DTOs
@using RealEstateBlazor.Services
@inject INotificationHub NotificationHub
@inject AuthenticationStateProvider AuthStateProvider
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>Notifications</PageTitle>

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <div class="container mt-4">
                <h1>My Notifications</h1>
                <p>You will receive notifications from the properties you have bookmarked.</p>
        
                @if (!NotificationHub.IsConnected)
                {
                    <div class="alert alert-warning" role="alert">
                        Connecting to notification service...
                    </div>
                }

                <div class="notifications-list">
                    @if (notifications.Any())
                    {
                        @foreach (var notification in notifications.OrderByDescending(n => n.Timestamp))
                        {
                            <div class="card mb-3">
                                <div class="card-body">
                                    @if (notification is PropertyNotificationDTO propertyNotification)
                                    {
                                        <h5 class="card-title">Property Update: @propertyNotification.Address</h5>
                                        <p class="card-text">
                                            Type: @propertyNotification.PropertyType<br/>
                                            Price: @propertyNotification.Price.ToString("C")<br/>
                                            @foreach (var detail in propertyNotification.Details)
                                            {
                                                <span>@detail.Key: @detail.Value<br/></span>
                                            }
                                        </p>
                                    }
                                    else if (notification is BookmarkNotificationDTO bookmarkNotification)
                                    {
                                        <h5 class="card-title">Bookmark Update: @bookmarkNotification.PropertyAddress</h5>
                                        <p class="card-text">
                                            Type: @bookmarkNotification.PropertyType<br/>
                                            Price: @bookmarkNotification.PropertyPrice.ToString("C")<br/>
                                            @foreach (var detail in bookmarkNotification.PropertyDetails)
                                            {
                                                <span>@detail.Key: @detail.Value<br/></span>
                                            }
                                        </p>
                                    }
                                    <small class="text-muted">@notification.Timestamp.ToLocalTime().ToString("g")</small>
                                </div>
                            </div>
                        }

                        @if (!notifications.Any())
                        {
                            <div class="alert alert-info" role="alert">
                                No notifications yet. When there are updates to your bookmarked properties, they'll appear here.
                            </div>
                        }
                    }
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="container mt-4">
                <div class="alert alert-warning">
                    Please log in to view your notifications.
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private List<INotification> notifications = new();
    private string? errorMessage;
    private bool initialized = false;

    /*protected override async Task OnInitializedAsync()
    {
        try
        {
            NotificationHub.OnPropertyNotificationReceived += HandlePropertyNotification;
            NotificationHub.OnBookmarkNotificationReceived += HandleBookmarkNotification;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing notifications: {ex.Message}";
        }
    }*/
    
    /*protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated == true)
            {
                var token = user.FindFirst("Token")?.Value;
                if (!string.IsNullOrEmpty(token) && !initialized)
                {
                    initialized = true;
                    await InitializeHub(token);
                }
            }
        }
    }*/

    private async Task InitializeHub(string token)
    {
        try
        {
            await NotificationHub.InitializeAsync(token);
            NotificationHub.OnPropertyNotificationReceived += HandlePropertyNotification;
            NotificationHub.OnBookmarkNotificationReceived += HandleBookmarkNotification;
            NotificationHub.OnConnectionStateChanged += HandleConnectionStateChanged;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing notification hub: {ex.Message}");
        }
    }
    
    private void HandlePropertyNotification(PropertyNotificationDTO notification)
    {
        notifications.Insert(0, notification);
        StateHasChanged();
    }
    
    private void HandleBookmarkNotification(BookmarkNotificationDTO notification)
    {
        notifications.Insert(0, notification);
        StateHasChanged();
    }

    private void HandleConnectionStateChanged(bool connected)
    {
        InvokeAsync(StateHasChanged);
    }
    
    public async ValueTask DisposeAsync()
    {
        if (NotificationHub != null)
        {
            NotificationHub.OnPropertyNotificationReceived -= HandlePropertyNotification;
            NotificationHub.OnBookmarkNotificationReceived -= HandleBookmarkNotification;
            NotificationHub.OnConnectionStateChanged -= HandleConnectionStateChanged;
            
            await NotificationHub.DisposeAsync();
        }
    }
}

<style>
    .notifications-list {
        max-width: 800px;
        margin: 0 auto;
    }

    .card {
        transition: transform 0.2s;
    }

    .card:hover {
        transform: translateY(-2px);
    }
</style>
